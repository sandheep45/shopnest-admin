// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

enum Role {
    USER
    ADMIN
}

enum UserStatus {
    ACTIVE
    INACTIVE
    BLOCKED
}

enum Status {
    PUBLISHED
    DRAFT
    INACTIVE
    SCHEDULED
}

enum Mediatype {
    IMAGE
    VIDEO
}

model Media {
    id   String    @id @default(auto()) @map("_id") @db.ObjectId
    type Mediatype
    url  String

    variantId String?  @db.ObjectId
    Variant   Variant? @relation(fields: [variantId], references: [id], onDelete: Cascade)

    Product  Product[]
    Category Category[]
    User     User[]
}

model Product {
    id          String @id @default(auto()) @map("_id") @db.ObjectId
    name        String
    tags        String
    description String
    status      Status
    rating      Int
    width       Int
    height      Int
    length      Int
    weight      Int

    VariantOptions VariantOptions[]
    MetaData       MetaData[]
    CustometReview CustomerReview[]
    Variant        Variant[]

    mediaId String? @db.ObjectId
    Media   Media?  @relation(fields: [mediaId], references: [id], onDelete: NoAction, onUpdate: NoAction)

    Category   Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade)
    categoryId String?   @db.ObjectId
}

model Variant {
    id                  String @id @default(auto()) @map("_id") @db.ObjectId
    description         String
    sku                 Int
    price               Int
    barcode             Int
    taxPercent          Int
    onSelfQuantity      Int
    inWareHouseQuantity Int

    Media           Media[]
    VariantMetaData MetaData[]

    Product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId String  @db.ObjectId
}

model VariantOptions {
    id    String @id @default(auto()) @map("_id") @db.ObjectId
    name  String
    value String

    productId String?  @db.ObjectId
    Product   Product? @relation(fields: [productId], references: [id])
}

model MetaData {
    id          String @id @default(auto()) @map("_id") @db.ObjectId
    title       String
    description String
    keywords    String

    productId String?  @db.ObjectId
    Product   Product? @relation(fields: [productId], references: [id])

    variantId String?  @db.ObjectId
    Variant   Variant? @relation(fields: [variantId], references: [id])

    categoryId String?   @db.ObjectId
    Category   Category? @relation(fields: [categoryId], references: [id])
}

model CustomerReview {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    title     String
    comment   String
    rating    Int
    createdAt DateTime @default(now())

    productId String?  @db.ObjectId
    Product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)

    userId String? @db.ObjectId
    User   User?   @relation(fields: [userId], references: [id])
}

model Category {
    id          String @id @default(auto()) @map("_id") @db.ObjectId
    name        String
    description String
    status      Status
    tags        String

    mediaId String @db.ObjectId
    Media   Media  @relation(fields: [mediaId], references: [id], onDelete: NoAction, onUpdate: NoAction)

    Metadata MetaData[]
    Product  Product[]
}

model Tags {
    id   String @id @default(auto()) @map("_id") @db.ObjectId
    name String @unique
}

model Example {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id             String     @id @default(auto()) @map("_id") @db.ObjectId
    createdAt      DateTime   @default(now())
    updatedAt      DateTime   @updatedAt
    name           String?
    email          String     @unique
    hashedPassword String?
    status         UserStatus @default(ACTIVE)
    role           Role       @default(ADMIN)

    mediaId String? @db.ObjectId
    Media   Media?  @relation(fields: [mediaId], references: [id], onDelete: Cascade)

    sessions       Session[]
    CustomerReview CustomerReview[]

    emailVerified DateTime?
    image         String?
    accounts      Account[]
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
